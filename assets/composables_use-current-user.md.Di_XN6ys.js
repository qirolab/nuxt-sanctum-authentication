import{_ as s,c as e,o as a,a5 as i}from"./chunks/framework.BmV27xUm.js";const g=JSON.parse('{"title":"useCurrentUser()","description":"","frontmatter":{},"headers":[],"relativePath":"composables/use-current-user.md","filePath":"composables/use-current-user.md"}'),t={name:"composables/use-current-user.md"},n=i(`<h1 id="usecurrentuser" tabindex="-1"><code>useCurrentUser()</code> <a class="header-anchor" href="#usecurrentuser" aria-label="Permalink to &quot;\`useCurrentUser()\`&quot;">​</a></h1><p><code>useCurrentUser()</code> is a dedicated composable for accessing the current authenticated user. It is handy when you need to access user data across various components without needing the full functionality of <code>useSanctum()</code>.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li><p><strong>Typed User Support</strong>: <br> The composable supports generic types, allowing you to define the shape of the user object as needed. This is particularly beneficial in TypeScript projects where you want strong typing for user data.</p><p>Example:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  email</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useCurrentUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span></code></pre></div></li><li><p><strong>Reactive User Data</strong>: <br> The <code>user</code> property is reactive, meaning that any changes to the authenticated user will automatically update wherever <code>useCurrentUser()</code> is used in your application.</p></li><li><p><strong>Returns <code>null</code> if Unauthenticated</strong>: <br> If no user is authenticated, <code>useCurrentUser()</code> returns <code>null</code>, making it easy to conditionally render content based on the user&#39;s authentication status.</p></li></ul>`,4),r=[n];function l(p,h,o,c,d,u){return a(),e("div",null,r)}const y=s(t,[["render",l]]);export{g as __pageData,y as default};
